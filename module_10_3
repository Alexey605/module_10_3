import threading
import time
import random

lock = threading.Lock()
balance = 0


class Bank:

    def __init__(self):
        threading.Thread.__init__(self)
        self.balance = balance
        self.lock = lock


    def deposit(self):
        for i in range(100):
            amount = random.randint(50, 500)
            if self.balance >= 500 and self.lock.locked():
                self.lock.release()
            self.balance += amount
            print(f"Пополнение: {amount}. Баланс: {self.balance}")
            time.sleep(0.001)
        return self.balance

    def take(self):
        for i in range(100):
            amount = random.randint(50, 500)
            print(f"Запрос на {amount}")
            if self.balance < amount:
                self.lock.acquire()
                print("Запрос отклонён, недостаточно средств")
            else:
                self.balance -= amount
                print(f"Снятие: {amount}. Баланс: {self.balance}")
            time.sleep(0.001)
        return self.balance


bk = Bank()

th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))

th1.start()
th2.start()
th1.join()
th2.join()

print(f'Итоговый баланс: {bk.balance}')
